set_mixer_control! hpf: 21
use_sched_ahead_time 1

use_midi_defaults port: "midi_through_midi_through_port-0_14_0"


def get_tempo
  set :tempo, 89
  return get[:tempo]
end

filter = lambda do |candidates|
  [candidates.tick]
end


live_loop :timer do
  cue :clock
  print get_tempo
  use_bpm get_tempo
  sleep bt(1)
end

# Sync 2-bar patterns
live_loop :half, autocue: false do
  sync :clock
  cue :halfnote
  sleep bt(0.5)
end

# Synch 4-bar patterns
live_loop :quarter, autocue: false do
  sync :clock
  cue :quarternote
  sleep bt(0.25)
end

use_osc "localhost", 8000

#osc "/record"


live_audio :mixer, input: 1, stereo: true

sleep 1

sample DRUMKITS, "ride - 3.flac", rate: 1.0

in_thread do
  loop do
    sync :clock
    panner = range(-0.8,0.8, step: 0.125, inclusive: true)
    with_fx :pan, pan: panner.tick do
      live_audio :delay, input: 3, stereo: false
    end
  end
end



live_loop :bassline01, sync: :clock do
  #stop
  notes = (ring :A3, :C4, :E4, :G4, :A2, :C3, :E3, :G3, :D4)
  use_octave 0
  
  8.times do
    midi notes.tick, channel: 3, velocity: 80, velocity_f: 72
    sleep 1
  end
  
end

live_loop :bassline02, sync: :clock do
  stop
  notes = (ring :A3, :C4, :E4, :G4, :A2, :C3, :E3, :G3, :D4)
  use_octave 0
  
  8.times do
    midi notes.tick, channel: 1, velocity: 80, velocity_f: 72
    sleep 1
  end
  
end

live_loop :banjo01, sync: :clock do
  stop
  notes = (note_range :a3, :a4, pitches: (chord :a, :minor7)).reflect
  
  2.times do
    midi notes.tick, channel: 4, velocity: 75, velocity_f: 72
    sleep [0.5,1].tick
  end
  
  sleep 0.5
  
end

live_loop :banjo02, sync: :clock do
  stop
  #notes = (note_range :c3, :c4, pitches: (chord :c, :M)).reflect.reverse
  notes = (scale :a3, :minor_pentatonic, num_octaves: 1).reverse
  
  2.times do
    midi notes.tick, channel: 4, velocity: 75, velocity_f: 72
    sleep 0.25
  end
  
  sleep 1
  
end

live_loop :spread_4_16 do
  stop
  if spread(4, 16).rotate(4).tick
    sample SYNTHS, "JoMoX_Whitense_Kick_69-03.flac", attack: 0.0125, sustain: 2, amp: 1.0
  end
  sleep 0.25
end

cnt = 0
# spread(6, 16)
# repeats every 8 bars
live_loop :spread_6_16 do
  stop
  16.times do
    if spread(6, 16).rotate(cnt).tick
      sample DRUMKITS, "40snare.flac", amp: 0.25
    end
    sleep 0.25
  end
  cnt += 1
end

# spread(12, 16)
# repeats every 4 bars
live_loop :spread_12_16 do
  #stop
  16.times do
    if spread(12, 16).rotate(cnt).tick
      with_fx :pan, pan: 0.1 do
        sample COLLECTIONS, /upright_bass/, filter, attack: 0.0125, amp: 0.35
      end
    end
    sleep 1
  end
  cnt += 1
end


live_loop :drums do
  stop
  with_fx :rbpf, centre: 80, res: 0.5 do
    sample :loop_amen, amp: 0.45, beat_stretch: 4
  end
  sleep 4
end



live_loop :bassclar, sync: :clock do
  stop
  16.times do
    sample SOUNDS, "cello_C2_phrase_mezzo-piano_arco-tremolo", onset: range(0, 10, inclusive: true).tick
    sleep 0.25
  end
end


live_loop :kick2, sync: :clock do
  #stop
  2.times do
    with_fx :pan, pan: -0.1 do
      sample SYNTHS, "JoMoX_Whitense_Kick_69-03.flac", attack: 0.0125, sustain: 2, amp: 1.0
    end
    sleep 1
  end
  sleep 4
  
  
end

live_loop :hat_4th_onbeat, sync: :clock do
  #stop
  at (range 0, 4, step: 3) do # (ring 0.0, 1.0, 2.0, 3.0), no 4, except you set: inclusive: true
    with_fx :pan, pan: -0.1 do
      sample SYNTHS, /JoMoX_Whitense_/, filter, attack: 0.0125, sustain: 2
    end
  end
  sleep 2
end


